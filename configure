#! /usr/bin/env node
/* vim:set ft=javascript : */
/*
 * Nodelint [VERSION]
 * [DATE]
 * A fork of tav's nodelint (http://github.com/tav/nodelint)
 * Corey Hart @ http://www.codenothing.com
 */
var Nodelint = require('./lib/nodelint/Nodelint'),
	sys = require('sys'),
	fs = require('fs'),
	path = require('path'),
	dist = __dirname + '/dist/',
	rhome = /^\~\//,
	rabs = /^\//,
	cwd = process.cwd() + '/',
	normalize = { jslint: true, prefix: true },
	argv;


// Creates the directory if it doesn't exist
function mkdir( dir, callback ) {
	path.exists( dir, function( exists ) {
		if ( exists ) {
			callback();
		}
		else {
			fs.mkdir( dir, 0755, function( e ) {
				if ( e ) {
					sys.error( e );
					process.exit( 1 );
				}

				callback();
			});
		}
	});
}


// Add configurables not in options
Nodelint.extend( Nodelint.Options, {
	jslint: null,
	prefix: process.installPrefix,
	blocklibs: false
});


// Store configuration
mkdir( dist, function(){
	// Borrow the main argument handler
	argv = Nodelint.ARGV( Nodelint.Options, process.argv.slice( 1 ) );

	// Ensure absolute paths
	[ 'jslint', 'prefix' ].forEach(function( name ) {
		var value = argv.options[ name ];
		if ( value ) {
			argv.options[ name ] = path.normalize(
				rhome.exec( value ) ? value.replace( rhome, process.env.HOME + '/' ) :
				! rabs.exec( value ) ? cwd + value :
				value
			);
		}
	});

	// Stash configuration
	fs.writeFile( dist + '.config', JSON.stringify( argv.options ), 'utf8', function( e ) {
		if ( e ) {
			sys.error( e );
			process.exit( 1 );
		}
	});
});
